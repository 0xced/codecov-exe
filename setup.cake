#module "nuget:?package=Cake.DotNetTool.Module&version=0.2.0"
#load "nuget:?package=Cake.Recipe&version=1.0.0"

Environment.SetVariableNames();

BuildParameters.SetParameters(context: Context,
                              buildSystem: BuildSystem,
                              sourceDirectoryPath: "./Source",
                              solutionFilePath: "./Source/Codecov.sln",
                              title: "Codecov-exe",
                              repositoryOwner: "codecov",
                              repositoryName: "codecov-exe",
                              appVeyorAccountName: "admiringworm",
                              shouldRunCodecov: true,
                              shouldRunGitVersion: true,
                              shouldExecuteGitLink: false);

BuildParameters.PrintParameters(Context);

ToolSettings.SetToolSettings(context: Context,
                             dupFinderExcludePattern: new string[] {
                                 BuildParameters.RootDirectoryPath + "/Source/*.Tests/**/*.cs"
                             },
                             dupFinderExcludeFilesByStartingCommentSubstring: new string[] {
                                 "<auto-generated>"
                             },
                             testCoverageFilter: "+[codecov*]* -[*.Tests]*",
                             testCoverageExcludeByAttribute: "*.ExcludeFromCodeCoverage",
                             testCoverageExcludeByFile: "*Designer.cs;*.g.cs;*.g.i.cs"
);

// We want to do our own publishing of Codecov-exe

var publishDirectory = BuildParameters.Paths.Directories.PublishedApplications + "/Codecov/publish";

Task("DotNetCore-Publish")
    .IsDependentOn("DotNetCore-Test")
    .Does(() =>
{
    var msBuildSettings = new DotNetCoreMSBuildSettings()
        .WithProperty("Version", BuildParameters.Version.SemVersion)
        .WithProperty("AssemblyVersion", BuildParameters.Version.Version)
        .WithProperty("FileVersion", BuildParameters.Version.Version)
        .WithProperty("AssemblyInformationalVersion", BuildParameters.Version.InformationalVersion);

    DotNetCorePack(BuildParameters.SourceDirectoryPath + "/Codecov.Tool", new DotNetCorePackSettings
    {
        Configuration = BuildParameters.Configuration,
        NoBuild = true,
        NoRestore = true,
        OutputDirectory = BuildParameters.Paths.Directories.NuGetPackages,
        MSBuildSettings = msBuildSettings
    });

    var project = ParseProject(BuildParameters.SourceDirectoryPath + "/Codecov/Codecov.csproj", BuildParameters.Configuration);
    var runtimeIdentifiers = project.NetCore.RuntimeIdentifiers;

    foreach (var runtime in runtimeIdentifiers) {
        DotNetCorePublish(project.ProjectFilePath.FullPath, new DotNetCorePublishSettings {
            Runtime = runtime,
            OutputDirectory = publishDirectory + "/" + runtime,
            MSBuildSettings = msBuildSettings
        });
    }
});

Task("Create-ZipArchive")
    .IsDependentOn("DotNetCore-Publish")
    .Does(() =>
{
    var outputBase = BuildParameters.Paths.Directories.Build + "/Codecov-";

    foreach (var directory in GetDirectories(publishDirectory + "/*")) {
        var dirName = directory.GetDirectoryName();
        Zip(dirName, outputBase + dirName + ".zip");
    }
});

BuildParameters.Tasks.CreateChocolateyPackagesTask.IsDependentOn("Create-ZipArchive");
BuildParameters.Tasks.CreateNuGetPackagesTask.IsDependentOn("DotNetCore-Publish");

BuildParameters.Tasks.UploadAppVeyorArtifactsTask.Does(() =>
{
    foreach (var archive in GetFiles(BuildParameters.Paths.Directories.Build + "/*.zip"))
    {
        AppVeyor.UploadArtifact(archive);
    }
});

// We'll need to remove the chocolatey package before trying to publish the github releases
Task("Remove-Unneeded Github Releases")
	.IsDependentOn("Publish-Chocolatey-Packages")
    .WithCriteria(() => BuildParameters.ShouldPublishGitHub)
    .Does(() =>
{
    DeleteFiles(BuildParameters.Paths.Directories.ChocolateyPackages + "/*");
});

BuildParameters.Tasks.PublishGitHubReleaseTask.IsDependentOn("Remove-Unneeded Github Releases");
BuildParameters.Tasks.PublishGitHubReleaseTask.Does(() => RequireTool(GitReleaseManagerTool, () =>
{
    if (BuildParameters.CanUseGitReleaseManager)
    {
        foreach (var archive in GetFiles(BuildParameters.Paths.Directories.Build + "/*.zip"))
        {
            GitReleaseManagerAddAssets(BuildParameters.GitHub.UserName, BuildParameters.GitHub.Password, BuildParameters.RepositoryOwner, BuildParameters.RepositoryName, BuildParameters.Version.Milestone, archive.ToString());
        }
    }
}));

// We want to dog food codecov so we can push using the built binaries
// This means we have to re-implement the whole task
((CakeTask)BuildParameters.Tasks.UploadCodecovReportTask.Task).Actions.Clear();
((CakeTask)BuildParameters.Tasks.UploadCodecovReportTask.Task).Criterias.Clear();

BuildParameters.Tasks.CleanTask.Does(() =>
{
    if (DirectoryExists("./tools/.store/codecov.tool")) {
        DeleteDirectory("./tools/.store/codecov.tool", new DeleteDirectorySettings {
            Recursive = true,
            Force     = true
        });
    }

    DeleteFiles(GetFiles("./tools/codecov*"));
});

BuildParameters.Tasks.UploadCodecovReportTask
    .IsDependentOn(BuildParameters.Tasks.CreateNuGetPackagesTask)
    .WithCriteria(() => FileExists(BuildParameters.Paths.Files.TestCoverageOutputFilePath), "No coverage report to upload")
    .Does(() => RequireTool(
        $"#tool dotnet:file://{MakeAbsolute(BuildParameters.Paths.Directories.NuGetPackages)}?package=Codecov.Tool&version={BuildParameters.Version.SemVersion}&prerelease",
        () => {
    var settings = new CodecovSettings {
        Files    = new[] { BuildParameters.Paths.Files.TestCoverageOutputFilePath.ToString() },
        Required = true,
        Verbose  = true,
        Dump     = BuildParameters.IsLocalBuild
    };

    if (BuildParameters.IsRunningOnUnix) {
        var tool = Context.Tools.Resolve("codecov"); // Wee need special handling because the version used of Cake.Codecov does not support linux executable path
        settings.ToolPath = tool;
    }

    if (BuildParameters.Version != null &&
        !string.IsNullOrEmpty(BuildParameters.Version.FullSemVersion) &&
        BuildParameters.IsRunningOnAppVeyor)
    {
        // Required to work correctly with appveyor because environment changes isn't detected until cake is done running.
        var buildVersion = string.Format("{0}.build.{1}",
            BuildParameters.Version.FullSemVersion,
            BuildSystem.AppVeyor.Environment.Build.Number);
        settings.EnvironmentVariables.Add("APPVEYOR_BUILD_VERSION", buildVersion);
    }

    Codecov(settings);

})).Finally(() => {
    if (publishingError) {
        throw new Exception("Uploading to codecov failed");
    }
});

BuildParameters.Tasks.DefaultTask.IsDependentOn(BuildParameters.Tasks.UploadCodecovReportTask);

BuildParameters.PrintParameters(Context);
Build.RunDotNetCore();
