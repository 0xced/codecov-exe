#load "nuget:https://www.myget.org/F/cake-contrib/api/v2?package=Cake.Recipe&prerelease"

Environment.SetVariableNames();

BuildParameters.SetParameters(context: Context,
                              buildSystem: BuildSystem,
                              sourceDirectoryPath: "./Source",
                              solutionFilePath: "./Source/Codecov.sln",
                              title: "Codecov-exe",
                              repositoryOwner: "codecov",
                              repositoryName: "codecov-exe",
                              appVeyorAccountName: "admiringworm",
                              shouldRunCodecov: true);

BuildParameters.PrintParameters(Context);

ToolSettings.SetToolSettings(context: Context,
                             dupFinderExcludePattern: new string[] {
                                 BuildParameters.RootDirectoryPath + "/Source/*.Tests/**/*.cs"
                             },
                             dupFinderExcludeFilesByStartingCommentSubstring: new string[] {
                                 "<auto-generated>"
                             },
                             testCoverageFilter: "+[codecov*]* -[*.Tests]*",
                             testCoverageExcludeByAttribute: "*.ExcludeFromCodeCoverage",
                             testCoverageExcludeByFile: "*Designer.cs;*.g.cs;*.g.i.cs"
);

// We want to do our own publishing of Codecov-exe

Task("DotNetCore-Publish")
    .IsDependentOn("DotNetCore-Test")
    .Does(() =>
{
    var msBuildSettings = new DotNetCoreMSBuildSettings()
        .WithProperty("Version", BuildParameters.Version.SemVersion)
        .WithProperty("AssemblyVersion", BuildParameters.Version.Version)
        .WithProperty("FileVersion", BuildParameters.Version.Version)
        .WithProperty("AssemblyInformationalVersion", BuildParameters.Version.InformationalVersion);

    DotNetCorePublish(BuildParameters.SourceDirectoryPath + "/Codecov", new DotNetCorePublishSettings
    {
        Configuration = BuildParameters.Configuration,
        Runtime = "win7-x64",
        OutputDirectory = BuildParameters.Paths.Directories.PublishedApplications + "/CodeCov/publish",
        MSBuildSettings = msBuildSettings
    });
});

Task("Create-ZipArchive")
    .IsDependentOn("DotNetCore-Publish")
    .Does(() =>
{
    var directory = BuildParameters.Paths.Directories.PublishedApplications + "/Codecov/publish";
    var output = BuildParameters.Paths.Directories.Build + "/Codecov.zip";

    Zip(directory, output);
});

BuildParameters.Tasks.CreateChocolateyPackagesTask.IsDependentOn("Create-ZipArchive");
BuildParameters.Tasks.CreateNuGetPackagesTask.IsDependentOn("DotNetCore-Publish");

BuildParameters.Tasks.UploadAppVeyorArtifactsTask.Does(() =>
{
    foreach (var archive in GetFiles(BuildParameters.Paths.Directories.Build + "/*.zip"))
    {
        AppVeyor.UploadArtifact(archive);
    }
});

BuildParameters.Tasks.PublishGitHubReleaseTask.Does(() => RequireTool(GitReleaseManagerTool, () =>
{
    if (BuildParameters.CanUseGitReleaseManager)
    {
        foreach (var archive in GetFiles(BuildParameters.Paths.Directories.Build + "/*.zip"))
        {
            GitReleaseManagerAddAssets(BuildParameters.GitHub.UserName, BuildParameters.GitHub.Password, BuildParameters.RepositoryOwner, BuildParameters.RepositoryName, BuildParameters.Version.Milestone, archive.ToString());
        }
    }
}));

BuildParameters.PrintParameters(Context);
Build.RunDotNetCore();
